/*
 * Copyright 2023 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import com.github.jengelman.gradle.plugins.shadow.relocation.SimpleRelocator
plugins {
	id "maven-publish"
	id "com.github.johnrengelman.shadow"
}

description = 'Auto Exporter for OpenTelemetry'

dependencies {
	api(libraries.auto_service_annotations)
	api(libraries.auto_value_annotations)
	annotationProcessor(libraries.auto_service)
	annotationProcessor(libraries.auto_value)
	compileOnly(libraries.opentelemetry_sdk_autoconf)
	compileOnly(libraries.opentelemetry_sdk)
	implementation(project(':exporter-metrics')) {
		exclude group: 'io.opentelemetry'
	}
	implementation(project(':exporter-trace')) {
		exclude group: 'io.opentelemetry'
	}
	implementation(project(':detector-resources')) {
		exclude group: 'io.opentelemetry'
	}
	implementation(project(':propagators-gcp')) {
		exclude group: 'io.opentelemetry'
	}
}

shadowJar {
	// gradle warns since explicit or implicit dependency on this shadowJar is not declared
	dependsOn ':shared-resourcemapping:shadowJar'
	archiveClassifier.set('shaded')
	mergeServiceFiles()
}

// Auto relocation for all dependencies
tasks.named('shadowJar') {
	// Prevent 'conscrypt' from being relocated.
	// See https://github.com/GoogleCloudPlatform/opentelemetry-operations-java/issues/161#issuecomment-1478831626 for details
	// Relocating it back to its original location excludes the package from being automatically relocated to the specified prefix
	relocate new SimpleRelocator("org.conscrypt", "org.conscrypt", new ArrayList<String>(), new ArrayList<String>())

	enableRelocation true
	relocationPrefix 'shadow'
}

publishing {
	publications {
		maven(MavenPublication) { publication ->
			from project.shadow.component(publication)
			artifact sourcesJar
			artifact javadocJar
			components.java.withVariantsFromConfiguration(configurations.runtimeElements) {
				skip()
			}
		}
	}
}